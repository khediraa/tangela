{"ast":null,"code":"import data from \"./resources/bikes.json\";\nvar bikes = data; //TODO: Update json file periodically to make backup.\n\nexport function getBike(id) {\n  return bikes[id];\n}\n/* Removes the rented days from the bike specified by id*/\n\nexport function rentBike(id, startDate, endDate) {\n  var dateArray = [];\n  var currentDate = startDate; //Put all dates between startDate and endDate in an array.\n\n  while (currentDate <= endDate) {\n    dateArray.push(DateToString(new Date(currentDate)));\n    currentDate = currentDate.addDays(1);\n  } //If all dates are not available for the bike, return false.\n  //TODO: alert user on return false.\n\n\n  dateArray.forEach(function (element) {\n    if (!bikes[id].dates.includes(element)) {\n      return false;\n    }\n  }); //Make the dates unavailable for the bike.\n\n  dateArray.forEach(function (element) {\n    if (bikes[id].dates.includes(element)) {\n      var index = bikes[id].dates.indexOf(element);\n      bikes[id].dates.splice(index, 1);\n    }\n  });\n  return true;\n}\n\nfunction DateToString(date) {\n  return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n}\n/* Returns a new Date object for a specified number of days after the current date. */\n\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};","map":{"version":3,"sources":["C:\\Users\\Ivan\\Desktop\\Ivan. Work\\IT project\\tangela\\project\\src\\BikeHandler.js"],"names":["data","bikes","getBike","id","rentBike","startDate","endDate","dateArray","currentDate","push","DateToString","Date","addDays","forEach","element","dates","includes","index","indexOf","splice","date","getFullYear","getMonth","getDate","prototype","days","valueOf","setDate"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,wBAAjB;AAEA,IAAIC,KAAK,GAAGD,IAAZ,C,CAAkB;;AAElB,OAAO,SAASE,OAAT,CAAiBC,EAAjB,EAAqB;AAC1B,SAAOF,KAAK,CAACE,EAAD,CAAZ;AACD;AAED;;AACA,OAAO,SAASC,QAAT,CAAkBD,EAAlB,EAAsBE,SAAtB,EAAiCC,OAAjC,EAA0C;AAC/C,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,WAAW,GAAGH,SAAlB,CAF+C,CAI/C;;AACA,SAAOG,WAAW,IAAIF,OAAtB,EAA+B;AAC7BC,IAAAA,SAAS,CAACE,IAAV,CAAeC,YAAY,CAAC,IAAIC,IAAJ,CAASH,WAAT,CAAD,CAA3B;AACAA,IAAAA,WAAW,GAAGA,WAAW,CAACI,OAAZ,CAAoB,CAApB,CAAd;AACD,GAR8C,CAU/C;AACA;;;AACAL,EAAAA,SAAS,CAACM,OAAV,CAAkB,UAAAC,OAAO,EAAI;AAC3B,QAAI,CAACb,KAAK,CAACE,EAAD,CAAL,CAAUY,KAAV,CAAgBC,QAAhB,CAAyBF,OAAzB,CAAL,EAAwC;AACtC,aAAO,KAAP;AACD;AACF,GAJD,EAZ+C,CAkB/C;;AACAP,EAAAA,SAAS,CAACM,OAAV,CAAkB,UAAAC,OAAO,EAAI;AAC3B,QAAIb,KAAK,CAACE,EAAD,CAAL,CAAUY,KAAV,CAAgBC,QAAhB,CAAyBF,OAAzB,CAAJ,EAAuC;AACrC,UAAIG,KAAK,GAAGhB,KAAK,CAACE,EAAD,CAAL,CAAUY,KAAV,CAAgBG,OAAhB,CAAwBJ,OAAxB,CAAZ;AACAb,MAAAA,KAAK,CAACE,EAAD,CAAL,CAAUY,KAAV,CAAgBI,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;AACD;AACF,GALD;AAMA,SAAO,IAAP;AACD;;AAED,SAASP,YAAT,CAAsBU,IAAtB,EAA4B;AAC1B,SAAOA,IAAI,CAACC,WAAL,KAAqB,GAArB,IAA4BD,IAAI,CAACE,QAAL,KAAkB,CAA9C,IAAmD,GAAnD,GAAyDF,IAAI,CAACG,OAAL,EAAhE;AACD;AAED;;;AACAZ,IAAI,CAACa,SAAL,CAAeZ,OAAf,GAAyB,UAAUa,IAAV,EAAgB;AACvC,MAAIL,IAAI,GAAG,IAAIT,IAAJ,CAAS,KAAKe,OAAL,EAAT,CAAX;AACAN,EAAAA,IAAI,CAACO,OAAL,CAAaP,IAAI,CAACG,OAAL,KAAiBE,IAA9B;AACA,SAAOL,IAAP;AACD,CAJD","sourcesContent":["import data from \"./resources/bikes.json\";\r\n\r\nvar bikes = data; //TODO: Update json file periodically to make backup.\r\n\r\nexport function getBike(id) {\r\n  return bikes[id];\r\n}\r\n\r\n/* Removes the rented days from the bike specified by id*/\r\nexport function rentBike(id, startDate, endDate) {\r\n  var dateArray = [];\r\n  var currentDate = startDate;\r\n\r\n  //Put all dates between startDate and endDate in an array.\r\n  while (currentDate <= endDate) {\r\n    dateArray.push(DateToString(new Date(currentDate)));\r\n    currentDate = currentDate.addDays(1);\r\n  }\r\n\r\n  //If all dates are not available for the bike, return false.\r\n  //TODO: alert user on return false.\r\n  dateArray.forEach(element => {\r\n    if (!bikes[id].dates.includes(element)) {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  //Make the dates unavailable for the bike.\r\n  dateArray.forEach(element => {\r\n    if (bikes[id].dates.includes(element)) {\r\n      var index = bikes[id].dates.indexOf(element);\r\n      bikes[id].dates.splice(index, 1);\r\n    }\r\n  });\r\n  return true;\r\n}\r\n\r\nfunction DateToString(date) {\r\n  return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n}\r\n\r\n/* Returns a new Date object for a specified number of days after the current date. */\r\nDate.prototype.addDays = function (days) {\r\n  var date = new Date(this.valueOf());\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n}"]},"metadata":{},"sourceType":"module"}