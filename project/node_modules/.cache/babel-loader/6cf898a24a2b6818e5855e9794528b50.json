{"ast":null,"code":"//import data from \"./resources/bikes.json\";\n//var bikes = data; //TODO: Update json file periodically to make backup.\nvar bikes = require('./resources/bikes.json');\n\nvar myId = 6;\nexport function getBike(id) {\n  return bikes[id];\n}\n/* Returns all bikes */\n\nexport function getAllBikes() {\n  return bikes;\n}\n/* Returns array of dates within starDate and endDate */\n\nexport function getDates(startDate, endDate) {\n  var dateArray = [];\n  var currentDate = startDate; //Put all dates between startDate and endDate in an array.\n\n  while (currentDate <= endDate) {\n    dateArray.push(DateToString(new Date(currentDate)));\n    currentDate = currentDate.addDays(1);\n  }\n\n  return dateArray;\n}\n/* Function that adds another bike to the json file */\n\nexport function addBike(name, lat, long, frame, type, gears, price, startDate, endDate, description) {\n  var newBike = {\n    name: name,\n    lat: lat,\n    long: long,\n    frame: frame,\n    type: type,\n    gears: gears,\n    price: price,\n    dates: getDates(startDate, endDate),\n    description: description\n  };\n  bikes[myId] = newBike;\n  console.log(bikes[myId]); //console.log(bikes);\n  //TODO: bikes ska skicka till JSON-filen\n\n  myId = myId + 1;\n}\n/* Removes the rented days from the bike specified by id*/\n\nexport function rentBike(id, startDate, endDate) {\n  //Adds all dates in range to an array\n  var dateArray = getDates(startDate, endDate); //If all dates are not available for the bike, return false.\n  //TODO: alert user on return false.\n\n  dateArray.forEach(function (element) {\n    if (!bikes[id].dates.includes(element)) {\n      return false;\n    }\n  }); //Make the dates unavailable for the bike.\n\n  dateArray.forEach(function (element) {\n    if (bikes[id].dates.includes(element)) {\n      var index = bikes[id].dates.indexOf(element);\n      bikes[id].dates.splice(index, 1);\n    }\n  });\n  return true;\n}\nexport function DateToString(date) {\n  return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\n}\n/* Returns a new Date object for a specified number of days after the current date. */\n\nDate.prototype.addDays = function (days) {\n  var date = new Date(this.valueOf());\n  date.setDate(date.getDate() + days);\n  return date;\n};","map":{"version":3,"sources":["C:\\Users\\Ivan\\Desktop\\Ivan. Work\\IT project\\tangela\\project\\src\\BikeHandler.js"],"names":["bikes","require","myId","getBike","id","getAllBikes","getDates","startDate","endDate","dateArray","currentDate","push","DateToString","Date","addDays","addBike","name","lat","long","frame","type","gears","price","description","newBike","dates","console","log","rentBike","forEach","element","includes","index","indexOf","splice","date","getFullYear","getMonth","getDate","prototype","days","valueOf","setDate"],"mappings":"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","sourcesContent":["//import data from \"./resources/bikes.json\";\r\n//var bikes = data; //TODO: Update json file periodically to make backup.\r\nvar bikes = require('./resources/bikes.json');\r\nvar myId=6;\r\n\r\nexport function getBike(id) {\r\n  return bikes[id];\r\n}\r\n\r\n/* Returns all bikes */\r\nexport function getAllBikes() {\r\n  return bikes;\r\n}\r\n\r\n/* Returns array of dates within starDate and endDate */\r\nexport function getDates(startDate, endDate) {\r\n  var dateArray = [];\r\n  var currentDate = startDate;\r\n  \r\n  //Put all dates between startDate and endDate in an array.\r\n  while (currentDate <= endDate) {\r\n    dateArray.push(DateToString(new Date(currentDate)));\r\n    currentDate = currentDate.addDays(1);\r\n  }\r\n  return dateArray;\r\n}\r\n\r\n/* Function that adds another bike to the json file */\r\nexport function addBike(name, lat, long, frame, type, gears, price, startDate, endDate, description) {\r\n    var newBike= ({name:name, lat:lat, long:long, frame:frame, type:type, gears:gears, price:price, dates:getDates(startDate, endDate), description:description });\r\n\r\n  bikes[myId] = newBike;\r\n  console.log(bikes[myId]);\r\n  //console.log(bikes);\r\n  //TODO: bikes ska skicka till JSON-filen\r\n  myId=myId+1;\r\n}\r\n\r\n/* Removes the rented days from the bike specified by id*/\r\nexport function rentBike(id, startDate, endDate) {\r\n  \r\n  //Adds all dates in range to an array\r\n  var dateArray = getDates(startDate, endDate);\r\n \r\n  //If all dates are not available for the bike, return false.\r\n  //TODO: alert user on return false.\r\n  dateArray.forEach(element => {\r\n    if (!bikes[id].dates.includes(element)) {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  //Make the dates unavailable for the bike.\r\n  dateArray.forEach(element => {\r\n    if (bikes[id].dates.includes(element)) {\r\n      var index = bikes[id].dates.indexOf(element);\r\n      bikes[id].dates.splice(index, 1);\r\n    }\r\n  });\r\n  return true;\r\n}\r\n\r\nexport function DateToString(date) {\r\n  return date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate();\r\n}\r\n\r\n/* Returns a new Date object for a specified number of days after the current date. */\r\nDate.prototype.addDays = function (days) {\r\n  var date = new Date(this.valueOf());\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}